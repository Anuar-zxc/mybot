import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from sklearn.linear_model import LogisticRegression
import numpy as np

API_TOKEN = YOUR_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ==== –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö —Å–∏–ª–∞/–æ–ø—ã—Ç ====
teams = {
    "Real Madrid": [90, 30],
    "Barcelona": [88, 28],
    "PSG": [85, 25],
    "Bayern": [87, 27],
    "Man City": [92, 29],
    "Arsenal": [80, 22],
    "Inter": [83, 23],
    "Chelsea": [78, 20],
}

# ==== –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ ====
# [—Ä–∞–∑–Ω–∏—Ü–∞ —Å–∏–ª—ã, —Ä–∞–∑–Ω–∏—Ü–∞ –æ–ø—ã—Ç–∞] -> –∏—Å—Ö–æ–¥
X = np.array([
    [10, 5], [5, 2], [-10, -5], [0, 0],
    [15, 10], [-20, -10], [8, 3], [-5, 0],
    [12, 7], [0, -2], [-15, -8], [3, 1]
])
y = np.array([2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 1])  # 0=–ø–æ—Ä–∞–∂–µ–Ω–∏–µ, 1=–Ω–∏—á—å—è, 2=–ø–æ–±–µ–¥–∞

model = LogisticRegression(max_iter=200)
model.fit(X, y)

labels = {0: "‚ùå –ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", 1: "üòê –ù–∏—á—å—è", 2: "üèÜ –ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤"}

user_data = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    user_data[message.from_user.id] = {}
    team_list = "\n".join([f"‚öΩ {t}" for t in teams.keys()])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! ‚öΩ\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n{team_list}\n\n"
        "–í–≤–µ–¥–∏ –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É:"
    )

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_data:
        user_data[user_id] = {}

    data = user_data[user_id]

    if "home" not in data:
        if text not in teams:
            await message.answer("‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        data["home"] = text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É:")
    elif "away" not in data:
        if text not in teams:
            await message.answer("‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        data["away"] = text
        home = teams[data["home"]]
        away = teams[data["away"]]

        diff = [home[0] - away[0], home[1] - away[1]]
        pred = model.predict([diff])[0]
        prob = model.predict_proba([diff]).max() * 100

        await message.answer(
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑:\n"
            f"üè† {data['home']} vs üèÉ {data['away']}\n\n"
            f"{labels[pred]} ({prob:.1f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)"
        )
        user_data[user_id] = {}  # –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        await message.answer("–•–æ—á–µ—à—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –µ—â—ë –º–∞—Ç—á? –í–≤–µ–¥–∏ –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É:")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
