import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import pandas as pd
import matplotlib.pyplot as plt
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = YOUR_TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–æ–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä)
train_data = [
    ("–Ø –ª—é–±–ª—é —Ñ—É—Ç–±–æ–ª!", "positive"),
    ("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–∞—Å–Ω–∞", "negative"),
    ("–ú–∞—Ç—á –±—ã–ª –Ω–æ—Ä–º", "neutral")
]
texts, labels = zip(*train_data)
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(texts)
clf = MultinomialNB().fit(X_train, labels)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–≥–Ω–æ–∑ –ó–æ–ª–æ—Ç–æ–≥–æ –º—è—á–∞ üèÜ")
    builder.button(text="–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    builder.adjust(2)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –¥–∏–∞–ª–æ–≥–∞ ‚öΩ\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    text = message.text.lower()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if "–∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏" in text:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å üòä")
        return
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –ó–æ–ª–æ—Ç–æ–≥–æ –º—è—á–∞
    if "–ø—Ä–æ–≥–Ω–æ–∑ –∑–æ–ª–æ—Ç–æ–≥–æ –º—è—á–∞" in text:
        try:
            # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–≤–æ—Ä–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (Ousmane Dembele –ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ PSG –≤ –õ–ß)
            players = ["–î–µ–º–±–µ–ª–µ", "–Ø–º–∞–ª—å", "–í–∏—Ç–∏–Ω—å—è", "–°–∞–ª–∞—Ö", "–†–∞—Ñ–∏–Ω—å—è"]
            probabilities = [45, 25, 15, 10, 5]  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ % –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–∫–º–µ–∫–µ—Ä–æ–≤ –∏ –°–ú–ò
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(8, 5))
            bars = plt.bar(players, probabilities, color=['#36A2EB', '#FF6384', '#FFCE56', '#4BC0C0', '#9966FF'])
            plt.title("–ü—Ä–æ–≥–Ω–æ–∑: –ó–æ–ª–æ—Ç–æ–π –º—è—á 2025")
            plt.ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)")
            plt.ylim(0, 50)
            plt.xticks(rotation=45)
            
            # –î–æ–±–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            for bar in bars:
                yval = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            # InputFile –¥–ª—è BytesIO
            from aiogram.types import InputFile  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
            photo = InputFile(buf, filename="forecast.png")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            await message.answer_photo(photo=photo, caption="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ó–æ–ª–æ—Ç–æ–π –º—è—á 2025: –î–µ–º–±–µ–ª–µ - –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç –ø–æ—Å–ª–µ —Ç—Ä–∏—É–º—Ñ–∞ PSG –≤ –õ–ß! üèÜ")
            
            buf.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        except Exception as e:
            logging.error(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")  # –î–ª—è –¥–µ–±–∞–≥–∞
            await message.answer("–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞. –¢–µ–∫—Å—Ç–æ–º: –§–∞–≤–æ—Ä–∏—Ç—ã - –î–µ–º–±–µ–ª–µ (45%), –Ø–º–∞–ª—å (25%), –í–∏—Ç–∏–Ω—å—è (15%). –î–µ–º–±–µ–ª–µ –≤—ã–∏–≥—Ä–∞–ª –±–ª–∞–≥–æ–¥–∞—Ä—è –õ–ß –∏ —Ç—Ä–µ–±–ª—É PSG.<grok-card data-id=\"c43af3\" data-type=\"citation_card\"></grok-card><grok-card data-id=\"7931c6\" data-type=\"citation_card\"></grok-card>")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    try:
        X_test = vectorizer.transform([text])
        prediction = clf.predict(X_test)[0]
        await message.answer(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {prediction} üòé")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòÖ")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    
    # –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ö—Ä—É—Ç–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å! ‚öΩ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
